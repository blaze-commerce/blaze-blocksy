name: Cleanup Outdated Version Bump PRs

# Trigger when PRs are closed/merged to main branch
on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

jobs:
  cleanup-outdated-version-bumps:
    name: Clean up outdated version bump PRs
    runs-on: ubuntu-latest

    # Run when a version bump PR is merged (auto-merged or manually merged)
    # OR when any regular PR is merged (to clean up any stale version bump PRs)
    if: >
      github.event.pull_request.merged == true &&
      (
        (
          github.event.pull_request.user.login == 'blazecommerce-automation-bot[bot]' &&
          (
            startsWith(github.event.pull_request.title, 'chore(release): bump theme version to') ||
            startsWith(github.event.pull_request.title, 'chore: bump version to')
          )
        ) ||
        (
          github.event.pull_request.user.login != 'blazecommerce-automation-bot[bot]' &&
          !startsWith(github.event.pull_request.head.ref, 'release/bump-v')
        )
      )
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Extract merged version
        id: extract-version
        run: |
          set -euo pipefail

          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          echo "Merged PR title: $PR_TITLE"
          echo "Merged PR author: $PR_AUTHOR"

          # Check if this is a version bump PR
          if [[ "$PR_AUTHOR" == "blazecommerce-automation-bot[bot]" ]] && [[ "$PR_TITLE" =~ chore(\(release\))?\:\ bump(\ theme)?\ version\ to\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            MERGED_VERSION="${BASH_REMATCH[3]}"
            echo "Extracted merged version: $MERGED_VERSION"
            echo "merged-version=$MERGED_VERSION" >> $GITHUB_OUTPUT
            echo "is-version-bump=true" >> $GITHUB_OUTPUT
          else
            # This is a regular PR merge, we'll look for the latest version from tags
            echo "This is a regular PR merge, finding latest version from tags..."
            LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1 | sed 's/^v//')
            if [ -n "$LATEST_TAG" ]; then
              echo "Latest version from tags: $LATEST_TAG"
              echo "merged-version=$LATEST_TAG" >> $GITHUB_OUTPUT
            else
              echo "No version tags found, using 0.0.0"
              echo "merged-version=0.0.0" >> $GITHUB_OUTPUT
            fi
            echo "is-version-bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Find and analyze open version bump PRs
        id: find-outdated-prs
        run: |
          set -euo pipefail
          
          MERGED_VERSION="${{ steps.extract-version.outputs.merged-version }}"
          echo "üîç Looking for outdated version bump PRs (merged version: $MERGED_VERSION)"
          
          # Get all open PRs created by the bot
          OPEN_PRS=$(gh pr list \
            --author "blazecommerce-automation-bot[bot]" \
            --state open \
            --json number,title,headRefName,url \
            --jq '.[] | select(.title | test("^chore(\\(release\\))?: bump( theme)? version to [0-9]+\\.[0-9]+\\.[0-9]+"))')
          
          if [ -z "$OPEN_PRS" ]; then
            echo "‚úÖ No open version bump PRs found"
            echo "outdated-prs=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üìã Found open version bump PRs:"
          echo "$OPEN_PRS" | jq -r '"  - PR #" + (.number | tostring) + ": " + .title'
          
          # Create temporary file for outdated PRs
          TEMP_FILE=$(mktemp)
          
          # Analyze each PR to determine if it's outdated
          echo "$OPEN_PRS" | jq -c '.' | while read -r pr; do
            PR_NUMBER=$(echo "$pr" | jq -r '.number')
            PR_TITLE=$(echo "$pr" | jq -r '.title')
            PR_BRANCH=$(echo "$pr" | jq -r '.headRefName')
            PR_URL=$(echo "$pr" | jq -r '.url')
            
            # Extract version from PR title
            if [[ "$PR_TITLE" =~ chore(\(release\))?\:\ bump(\ theme)?\ version\ to\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
              PR_VERSION="${BASH_REMATCH[3]}"
              
              echo "Comparing versions: PR=$PR_VERSION vs Merged=$MERGED_VERSION"
              
              # Compare versions using sort -V (version sort)
              if [ "$PR_VERSION" != "$MERGED_VERSION" ]; then
                # Check if PR version is less than or equal to merged version
                OLDER_VERSION=$(printf '%s\n%s\n' "$PR_VERSION" "$MERGED_VERSION" | sort -V | head -n1)
                
                if [ "$OLDER_VERSION" = "$PR_VERSION" ] || [ "$PR_VERSION" = "$MERGED_VERSION" ]; then
                  echo "‚ùå PR #$PR_NUMBER (v$PR_VERSION) is outdated (merged: v$MERGED_VERSION)"
                  echo "$pr" >> "$TEMP_FILE"
                else
                  echo "‚úÖ PR #$PR_NUMBER (v$PR_VERSION) is newer than merged version (v$MERGED_VERSION)"
                fi
              else
                echo "‚ö†Ô∏è PR #$PR_NUMBER has same version as merged PR (duplicate)"
                echo "$pr" >> "$TEMP_FILE"
              fi
            else
              echo "‚ö†Ô∏è Could not extract version from PR title: $PR_TITLE"
            fi
          done
          
          # Read outdated PRs from temp file
          if [ -f "$TEMP_FILE" ] && [ -s "$TEMP_FILE" ]; then
            OUTDATED_PRS=$(cat "$TEMP_FILE" | jq -s '.')
            echo "outdated-prs=$OUTDATED_PRS" >> $GITHUB_OUTPUT
            echo "üìã Outdated PRs to close:"
            echo "$OUTDATED_PRS" | jq -r '.[] | "  - PR #" + (.number | tostring) + ": " + .title'
          else
            echo "‚úÖ No outdated version bump PRs found"
            echo "outdated-prs=" >> $GITHUB_OUTPUT
          fi
          
          rm -f "$TEMP_FILE"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close outdated version bump PRs
        if: steps.find-outdated-prs.outputs.outdated-prs != ''
        run: |
          set -euo pipefail
          
          MERGED_VERSION="${{ steps.extract-version.outputs.merged-version }}"
          OUTDATED_PRS='${{ steps.find-outdated-prs.outputs.outdated-prs }}'
          
          echo "üßπ Closing outdated version bump PRs..."
          
          echo "$OUTDATED_PRS" | jq -c '.[]' | while read -r pr; do
            PR_NUMBER=$(echo "$pr" | jq -r '.number')
            PR_TITLE=$(echo "$pr" | jq -r '.title')
            PR_BRANCH=$(echo "$pr" | jq -r '.headRefName')
            PR_URL=$(echo "$pr" | jq -r '.url')
            
            # Extract version from PR title for the comment
            if [[ "$PR_TITLE" =~ chore(\(release\))?\:\ bump(\ theme)?\ version\ to\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
              PR_VERSION="${BASH_REMATCH[3]}"
            else
              PR_VERSION="unknown"
            fi
            
            echo "üóëÔ∏è Closing PR #$PR_NUMBER (v$PR_VERSION)..."
            
            # Add explanatory comment
            IS_VERSION_BUMP="${{ steps.extract-version.outputs.is-version-bump }}"
            if [ "$IS_VERSION_BUMP" = "true" ]; then
              TRIGGER_REASON="version **$MERGED_VERSION** has been auto-merged"
              TRIGGER_VIA="Auto-merged via: ${{ github.event.pull_request.html_url }}"
            else
              TRIGGER_REASON="a newer release process has been triggered"
              TRIGGER_VIA="Triggered by: ${{ github.event.pull_request.html_url }}"
            fi

            COMMENT="ü§ñ **Automated Cleanup**

            This version bump PR is being automatically closed because $TRIGGER_REASON.

            **Details:**
            - üì¶ **Target version**: $PR_VERSION
            - ‚úÖ **Current version**: $MERGED_VERSION
            - üîó **$TRIGGER_VIA**
            - üïí **Closed at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

            This version bump is no longer needed. If you believe this was closed in error, please contact the maintainers.

            ---
            *This action was performed automatically by the [cleanup workflow](https://github.com/${{ github.repository }}/blob/main/.github/workflows/cleanup-outdated-version-bumps.yml).*"
            
            # Add comment to PR
            gh pr comment "$PR_NUMBER" --body "$COMMENT"
            
            # Close the PR
            gh pr close "$PR_NUMBER" --comment "Automatically closed - version $MERGED_VERSION already released"
            
            echo "‚úÖ Closed PR #$PR_NUMBER"
            
            # Optional: Delete the branch (with safety check)
            if [[ "$PR_BRANCH" =~ ^release/bump-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "üóëÔ∏è Deleting branch: $PR_BRANCH"
              git push origin --delete "$PR_BRANCH" || echo "‚ö†Ô∏è Could not delete branch $PR_BRANCH (may already be deleted)"
            else
              echo "‚ö†Ô∏è Skipping branch deletion for non-standard branch name: $PR_BRANCH"
            fi
            
            echo "---"
          done
          
          echo "üéâ Cleanup completed successfully!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: always()
        run: |
          echo "üìä **Cleanup Summary**"
          echo "- üéØ **Trigger**: Version bump PR merged (v${{ steps.extract-version.outputs.merged-version }})"
          echo "- üîç **Scanned**: Open PRs created by blazecommerce-automation-bot[bot]"
          echo "- üßπ **Action**: Closed outdated version bump PRs and deleted branches"
          echo "- ‚úÖ **Status**: Cleanup completed"
