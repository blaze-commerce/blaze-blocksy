name: Auto-Merge Version Bump PRs

# This workflow automatically enables auto-merge for version bump PRs created by the automation bot
# after validating that all required checks pass and there are no merge conflicts.
# The PR will be merged automatically once all branch protection requirements are satisfied.
#
# Security: Only runs for PRs created by blazecommerce-automation-bot[bot]
# Reliability: Includes comprehensive null checking for GitHub API responses
# Configuration: Timeouts and intervals can be customized via repository variables
#
# Trigger when version bump PRs are opened or updated
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - master

jobs:
  auto-merge-version-bump:
    name: Auto-merge version bump PR
    runs-on: ubuntu-latest
    
    # Only run for version bump PRs created by the automation bot
    if: >
      github.event.pull_request.user.login == 'blazecommerce-automation-bot[bot]' &&
      (
        startsWith(github.event.pull_request.title, 'chore(release): bump theme version to') ||
        startsWith(github.event.pull_request.title, 'chore: bump version to')
      )
    
    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: read
      
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        continue-on-error: true
        with:
          app-id: ${{ secrets.BLAZECOMMERCE_BOT_APP_ID }}
          private-key: ${{ secrets.BLAZECOMMERCE_BOT_PRIVATE_KEY }}

      - name: Fallback to GITHUB_TOKEN if App Token fails
        id: token-fallback
        run: |
          if [ "${{ steps.app-token.outcome }}" = "failure" ]; then
            echo "⚠️ GitHub App token generation failed, falling back to GITHUB_TOKEN"
            echo "token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
            echo "using-fallback=true" >> $GITHUB_OUTPUT
          else
            echo "✅ GitHub App token generated successfully"
            echo "token=${{ steps.app-token.outputs.token }}" >> $GITHUB_OUTPUT
            echo "using-fallback=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.token-fallback.outputs.token }}
          fetch-depth: 1

      - name: Validate version bump PR
        id: validate-pr
        run: |
          set -euo pipefail
          
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          
          echo "🔍 Validating version bump PR #$PR_NUMBER"
          echo "Title: $PR_TITLE"
          echo "Author: $PR_AUTHOR"
          
          # Extract version from PR title
          if [[ "$PR_TITLE" =~ chore(\(release\))?\:\ bump(\ theme)?\ version\ to\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[3]}"
            echo "✅ Valid version bump PR for version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid version bump PR title format"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate author is the automation bot
          if [ "$PR_AUTHOR" != "blazecommerce-automation-bot[bot]" ]; then
            echo "❌ PR not created by automation bot"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Version bump PR validation passed"

      - name: Wait for required checks
        id: wait-for-checks
        env:
          GH_TOKEN: ${{ steps.token-fallback.outputs.token }}
        run: |
          set -euo pipefail

          PR_NUMBER="${{ github.event.pull_request.number }}"
          # Configuration: Make timeouts configurable via environment variables
          MAX_WAIT_TIME="${{ vars.AUTO_MERGE_MAX_WAIT_TIME || '900' }}"   # Default: 15 minutes
          CHECK_INTERVAL="${{ vars.AUTO_MERGE_CHECK_INTERVAL || '30' }}"   # Default: 30 seconds
          ELAPSED_TIME=0

          echo "⏳ Waiting for required checks to complete for PR #$PR_NUMBER"
          echo "📊 Configuration: Max wait time: ${MAX_WAIT_TIME}s, Check interval: ${CHECK_INTERVAL}s"

          # Define checks to exclude (avoid circular dependency)
          # This prevents the workflow from waiting for itself to complete
          EXCLUDED_CHECKS="Auto-merge version bump PR|Auto-Merge Version Bump PRs"

          while [ $ELAPSED_TIME -lt $MAX_WAIT_TIME ]; do
            echo "🔍 Checking PR status (elapsed: ${ELAPSED_TIME}s)..."

            # Get PR check status from GitHub API
            # This retrieves all status checks associated with the PR
            PR_STATUS=$(gh pr view "$PR_NUMBER" --json statusCheckRollup --jq '.statusCheckRollup[]')

            if [ -z "$PR_STATUS" ]; then
              echo "ℹ️ No status checks found, proceeding with merge"
              echo "🔍 Debug: This usually means no CI/CD checks are configured for this repository"
              echo "checks-passed=true" >> $GITHUB_OUTPUT
              break
            fi

            # Filter out excluded checks (our own workflow) with null safety
            # This prevents circular dependency where the workflow waits for itself
            # Null checks prevent jq errors when GitHub API returns incomplete data
            FILTERED_STATUS=$(echo "$PR_STATUS" | jq -r --arg excluded "$EXCLUDED_CHECKS" 'select(.context != null and (.context | test($excluded) | not))')

            if [ -z "$FILTERED_STATUS" ]; then
              echo "ℹ️ No external status checks found (only auto-merge workflow), proceeding with merge"
              echo "🔍 Debug: All checks were either null or matched exclusion pattern: $EXCLUDED_CHECKS"
              echo "checks-passed=true" >> $GITHUB_OUTPUT
              break
            fi

            # Analyze check status with comprehensive null safety
            # Count pending and failed checks while handling potential null values from GitHub API
            PENDING_CHECKS=$(echo "$FILTERED_STATUS" | jq -r 'select(.status != null and .context != null and (.status == "PENDING" or .status == "IN_PROGRESS")) | .context' | wc -l)
            FAILED_CHECKS=$(echo "$FILTERED_STATUS" | jq -r 'select(.status != null and .context != null and (.status == "FAILURE" or .status == "ERROR")) | .context' | wc -l)

            echo "📊 Check status: $PENDING_CHECKS pending, $FAILED_CHECKS failed"

            if [ "$FAILED_CHECKS" -gt 0 ]; then
              echo "❌ Some checks have failed:"
              echo "$FILTERED_STATUS" | jq -r 'select(.status != null and .context != null and (.status == "FAILURE" or .status == "ERROR")) | "  - " + .context + ": " + .status'
              echo "checks-passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi

            if [ "$PENDING_CHECKS" -eq 0 ]; then
              echo "✅ All external checks have completed successfully"
              echo "checks-passed=true" >> $GITHUB_OUTPUT
              break
            fi

            echo "⏳ $PENDING_CHECKS external checks still pending, waiting..."
            echo "$FILTERED_STATUS" | jq -r 'select(.status != null and .context != null and (.status == "PENDING" or .status == "IN_PROGRESS")) | "  - " + .context + ": " + .status'

            sleep $CHECK_INTERVAL
            ELAPSED_TIME=$((ELAPSED_TIME + CHECK_INTERVAL))
          done

          if [ $ELAPSED_TIME -ge $MAX_WAIT_TIME ]; then
            echo "⏰ Timeout waiting for checks to complete"
            echo "Remaining pending checks:"
            echo "$FILTERED_STATUS" | jq -r 'select(.status != null and .context != null and (.status == "PENDING" or .status == "IN_PROGRESS")) | "  - " + .context + ": " + .status'
            echo "checks-passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Check for merge conflicts
        id: check-conflicts
        env:
          GH_TOKEN: ${{ steps.token-fallback.outputs.token }}
        run: |
          set -euo pipefail
          
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          echo "🔍 Checking for merge conflicts in PR #$PR_NUMBER"
          
          # Get PR mergeable status
          MERGEABLE=$(gh pr view "$PR_NUMBER" --json mergeable --jq '.mergeable')
          
          case "$MERGEABLE" in
            "MERGEABLE")
              echo "✅ PR is mergeable, no conflicts detected"
              echo "mergeable=true" >> $GITHUB_OUTPUT
              ;;
            "CONFLICTING")
              echo "❌ PR has merge conflicts"
              echo "mergeable=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "UNKNOWN")
              echo "⚠️ Merge status unknown, GitHub may still be calculating"
              echo "Waiting 30 seconds and checking again..."
              sleep 30
              MERGEABLE=$(gh pr view "$PR_NUMBER" --json mergeable --jq '.mergeable')
              if [ "$MERGEABLE" = "MERGEABLE" ]; then
                echo "✅ PR is mergeable after recheck"
                echo "mergeable=true" >> $GITHUB_OUTPUT
              else
                echo "❌ PR merge status still unknown or conflicting"
                echo "mergeable=false" >> $GITHUB_OUTPUT
                exit 1
              fi
              ;;
            *)
              echo "❌ Unknown mergeable status: $MERGEABLE"
              echo "mergeable=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

      - name: Auto-merge version bump PR
        id: auto-merge
        env:
          GH_TOKEN: ${{ steps.token-fallback.outputs.token }}
        run: |
          set -euo pipefail
          
          PR_NUMBER="${{ github.event.pull_request.number }}"
          VERSION="${{ steps.validate-pr.outputs.version }}"
          
          echo "🚀 Enabling auto-merge for version bump PR #$PR_NUMBER (v$VERSION)"
          
          # Add a comment explaining the auto-merge
          COMMENT="🤖 **Auto-Merge Enabled**

          This version bump PR has been queued for automatic merge as part of the release automation process.

          **Details:**
          - 📦 **Version**: $VERSION
          - ✅ **Checks status**: Required CI/CD checks completed successfully
          - 🔄 **No conflicts**: PR is mergeable without conflicts
          - ⏰ **Auto-merge enabled at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          The PR will be automatically merged once all branch protection requirements are satisfied (approvals, status checks, etc.).

          ---
          *This action was performed automatically by the [auto-merge workflow](https://github.com/${{ github.repository }}/blob/main/.github/workflows/auto-merge-version-bumps.yml).*"
          
          # Add comment to PR
          gh pr comment "$PR_NUMBER" --body "$COMMENT"
          
          # Enable auto-merge for the PR using squash merge
          # This respects branch protection rules and will merge automatically
          # once all required checks pass and approvals are obtained
          gh pr merge "$PR_NUMBER" --squash --delete-branch --auto
          
          echo "✅ Successfully enabled auto-merge for PR #$PR_NUMBER"
          echo "auto-merge-enabled=true" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Post-merge setup
        if: steps.auto-merge.outputs.auto-merge-enabled == 'true'
        env:
          GH_TOKEN: ${{ steps.token-fallback.outputs.token }}
        run: |
          set -euo pipefail

          VERSION="${{ steps.auto-merge.outputs.version }}"

          echo "🧹 Auto-merge enabled for version $VERSION"

          # The cleanup-outdated-version-bumps workflow will handle
          # cleaning up any other outdated version bump PRs after merge completes
          echo "✅ Auto-merge enabled, cleanup workflow will handle outdated PRs after merge"

      - name: Notify on success
        if: success()
        run: |
          echo "🎉 Version bump PR auto-merge enabled successfully!"
          echo "📦 Version: ${{ steps.validate-pr.outputs.version }}"
          echo "🔗 PR: https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          echo "⏰ The PR will be automatically merged once all branch protection requirements are satisfied."

      - name: Notify on failure
        if: failure()
        env:
          GH_TOKEN: ${{ steps.token-fallback.outputs.token }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          echo "❌ Auto-merge workflow failed for PR #$PR_NUMBER"
          
          # Add a comment to the PR explaining the failure
          FAILURE_COMMENT="🚨 **Auto-Merge Failed**

          The automated merge process failed for this version bump PR. Manual intervention may be required.

          **Possible reasons:**
          - CI/CD checks failed or timed out
          - Merge conflicts detected
          - Branch protection requirements not met (missing approvals, status checks, etc.)
          - GitHub API issues
          - Insufficient permissions

          Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details and merge manually if appropriate.

          ---
          *This notification was generated by the [auto-merge workflow](https://github.com/${{ github.repository }}/blob/main/.github/workflows/auto-merge-version-bumps.yml).*"
          
          gh pr comment "$PR_NUMBER" --body "$FAILURE_COMMENT" || echo "Failed to add failure comment"
          
          if [ "${{ steps.token-fallback.outputs.using-fallback }}" = "true" ]; then
            echo "⚠️ Note: Workflow used GITHUB_TOKEN fallback due to GitHub App token failure"
            echo "Consider checking GitHub App configuration for better functionality"
          fi
          
          exit 1
